import os
import sys
import datetime
from ctypes import *

KERNEL32 = windll.kernel32

FORMAT_MESSAGE_ALLOCATE_BUFFER = 0x00000100
FORMAT_MESSAGE_FROM_HMODULE = 0x00000800
FORMAT_MESSAGE_IGNORE_INSERTS = 0x00000200


NTDLL_BASE = KERNEL32.GetModuleHandleW(c_wchar_p("ntdll.dll"))

def stringFromNTSTATUS(status):
    buffer = POINTER(c_wchar)()
    cch = KERNEL32.FormatMessageW(
        FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_HMODULE | FORMAT_MESSAGE_IGNORE_INSERTS,
        NTDLL_BASE,
        status,
        0, # language neutral
        byref(buffer),
        0,
        None
    )
    
    if cch == 0:
        return ''
        
    result = wstring_at(buffer)
    KERNEL32.HeapFree(KERNEL32.GetProcessHeap(), 0, buffer)

    return result.rstrip().replace('\r\n', ' ').replace('\"', '\\\"')


def stringToNTSTATUS(str):
    digitPos = 0
    for c in str:
        if c.isdigit():
            break

        digitPos += 1
        
    str = str[digitPos:]
    
    valueLength = 0
    for c in str:
        if not (c.isdigit() or ((c >= 'a') and (c <= 'f')) or (((c >= 'A') and (c <= 'F'))) or (c == 'x')):
            break

        valueLength += 1
        
    str = str[0:valueLength]    
    
    return int(str, 0)
    

def printUsage():
    print('parse_ntstatus [?] -in <input-file> -out <output-file> [-c|w] [-e]')    
    print('-c         (default) format text strings as char, i.e., \"STATUS_NO_MORE_ENTRIES\"')
    print('-w         format text strings as wchar_t[], i.e., L\"STATUS_NO_MORE_ENTRIES\"')
    print('-e         include exended error text, e.g., \"No more entries are available from an enumeration operation.\"') 
    print('?          print this text')   
    

def main():
    nameIn = None
    nameOut = None
    wcharStrings = False
    extendedText = False

    argc = len(sys.argv) 
    i = 0
    while i < argc:
        if sys.argv[i] == '?':
            printUsage()
            sys.exit()
        elif sys.argv[i] == '-c':
            wcharStrings = False
        elif sys.argv[i] == '-w':
            wcharStrings = True
        elif sys.argv[i] == '-e':
            extendedText = True
        elif sys.argv[i] == '-in':
            if i < argc - 1:
                nameIn = sys.argv[i + 1]
        elif sys.argv[i] == '-out':
            if i < argc - 1:
                nameOut = sys.argv[i + 1]        
            
        i += 1
    
    if (not nameIn) or (not nameOut):
        printUsage()
        sys.exit()
     
    if not os.path.isfile(nameIn):
        print('Input file ' + nameIn + ' does not exist')
        sys.exit()
      
    sChar = 'char'  
    if wcharStrings:
        sChar = 'wchar_t'
        
        
    count = 0
    with open(nameOut, 'w') as fOut:
        fOut.write('// Generated by ' + sys.argv[0] + ' from ' + nameIn + ' ' + datetime.datetime.now().isoformat() + '\n')
        fOut.write('// DO NOT EDIT MANUALLY\n\n\n')
        
        fOut.write('typedef struct\n')
        fOut.write('{\n')
        fOut.write('    NTSTATUS status;\n')
        fOut.write('    const ' + sChar + '* name;\n')
        
        if extendedText:
            fOut.write('    const ' + sChar + '* message;\n')
        
        fOut.write('} ntstatus_mapping_t;\n')
        fOut.write('\n')
        fOut.write('\n')
        fOut.write('static const ntstatus_mapping_t s_NTSTATUS_mapping[] = {\n')
        
        with open(nameIn) as fIn:
            for line in fIn:
                pos = line.find('#define', 0)
                if pos == -1:
                    continue
                    
                line = line[pos + 7:].lstrip()   
                    
                pos = line.find('STATUS_', pos)  
                if pos != 0:
                    continue  

                if line.find('STATUS_SEVERITY_', pos) == pos:
                    continue
                    
                line = line[pos:]

                nameLength = 0
                for c in line:
                    if c.isspace():
                        break

                    nameLength += 1
                    
                statusName = line[0:nameLength]
                    
                statusValue = line[nameLength:].lstrip()
                valueLength = 0
                for c in statusValue:
                    if c.isspace():
                        break
                        
                    valueLength += 1
                    
                statusValue = statusValue[0:valueLength]
                           
                if extendedText:
                    if wcharStrings:
                        fOut.write('    { ' + statusValue + ', L\"' + statusName + '\", L\"' + stringFromNTSTATUS(stringToNTSTATUS(statusValue)) + '\" }, \n')
                    else:
                        fOut.write('    { ' + statusValue + ', \"' + statusName + '\", \"' + stringFromNTSTATUS(stringToNTSTATUS(statusValue)) + '\" }, \n')
                else:
                    if wcharStrings:
                        fOut.write('    { ' + statusValue + ', L\"' + statusName + '\" }, \n')
                    else:
                        fOut.write('    { ' + statusValue + ', \"' + statusName + '\" }, \n')
                
                count += 1
              
        fOut.write('    { 0, 0 }\n')                 
        fOut.write('};\n\n')  
        fOut.write('static const size_t s_NTSTATUS_mappings = ' + str(count) + ';\n\n')  
        
        fOut.write('const ' + sChar + '* lookupNTSTATUSName(NTSTATUS status)\n')  
        fOut.write('{\n')  
        fOut.write('    for (size_t i = 0; i < s_NTSTATUS_mappings; i++)\n')  
        fOut.write('    {\n')  
        fOut.write('        if (status == s_NTSTATUS_mapping[i].status)\n')  
        fOut.write('        {\n')  
        fOut.write('            return s_NTSTATUS_mapping[i].name;\n')  
        fOut.write('        }\n')  
        fOut.write('    }\n\n')  
        fOut.write('    return nullptr;\n')  
        fOut.write('}\n\n')  
        
        if extendedText: 
            fOut.write('const ' + sChar + '* lookupNTSTATUSText(NTSTATUS status)\n')  
            fOut.write('{\n')  
            fOut.write('    for (size_t i = 0; i < s_NTSTATUS_mappings; i++)\n')  
            fOut.write('    {\n')  
            fOut.write('        if (status == s_NTSTATUS_mapping[i].status)\n')  
            fOut.write('        {\n')  
            fOut.write('            return s_NTSTATUS_mapping[i].message;\n')  
            fOut.write('        }\n')  
            fOut.write('    }\n\n')  
            fOut.write('    return nullptr;\n')  
            fOut.write('}\n')  
        
    print(str(count) + ' NTSTATUS codes parsed')            

  
if __name__ == '__main__':
    main()